# .clinerules
#
# This file contains conventions, best practices, and guidelines for working on
# the incident management frontend project.

repository:
  - Private GitHub repository only
  - No GitLab integration (git configured to prevent accidental pushes)
  - Branch strategy:
    - main: production-ready code
    - feature/*: new features
    - fix/*: bug fixes
    - docs/*: documentation updates
    - refactor/*: code improvements

dependencies:
  - Core:
    - React + TypeScript
    - Vite for build tooling
    - Tailwind CSS for styling
  - UI/Animation:
    - framer-motion: animations
    - lucide-react: icons
  - Future additions:
    - @mui/material: UI components
    - @tanstack/react-query: API client
    - react-hook-form: form handling
    - zod: validation

development:
  - Start the development server with `npm run dev`
  - Server will automatically reload on file changes
  - Environment setup:
    ```
    VITE_API_URL=http://localhost:3000
    VITE_NODE_ENV=development
    ```
  - VSCode settings configured for:
    - TypeScript validation
    - CSS/Tailwind support
    - Format on save
    - ESLint integration

coding_conventions:
  - Use strict TypeScript rules; avoid `any` unless absolutely necessary
  - Use functional components with hooks
  - Implement proper error boundaries
  - Use proper TypeScript types for API responses
  - Follow React best practices:
    - Proper component composition
    - Custom hooks for reusable logic
    - Memoization when needed
  - Maintain a modular structure:
    - `src/components/` for reusable UI components
    - `src/pages/` for route components
    - `src/hooks/` for custom hooks
    - `src/api/` for API integration
    - `src/types/` for TypeScript interfaces
    - `src/utils/` for shared utilities
    - `src/context/` for React context providers
    - `src/theme/` for theme customization

components:
  - Timeline:
    - Collapsible card stack with 32px offset
    - Tag-based filtering system
    - Expandable/collapsible animation using framer-motion
    - "Collapse All" functionality
    - Dynamic height calculation based on stack state
  
  - ArtifactCard:
    - Spring animations for smooth transitions
    - Z-index management for proper stacking
    - Support for different content types:
      * Prometheus charts (placeholder)
      * Grafana panels (placeholder)
      * Text notes
    - Metric display with circular indicator
    - Tag display
    - More actions menu
  
  - Tag:
    - Toggle functionality
    - Active/inactive states
    - Used for filtering artifacts
  
  - FloatingActionButton:
    - Add new artifacts (to be implemented)

animations:
  - Use framer-motion for smooth transitions
  - Spring animations for natural feel
  - Proper z-index management for stacking
  - Height animations for expand/collapse
  - Scale animations for hover states

current_state:
  - Implemented:
    - Project structure and configuration
    - Development environment setup
    - Basic component architecture
    - Collapsible timeline with animations
    - Tag-based filtering
    - Dark theme styling

  - In Progress:
    - API integration setup
    - Incidents CRUD implementation
    - Timeline component reuse

  - Next Focus:
    - Connect with backend API:
      * Set up API client
      * Add proper error handling
      * Implement loading states
    - Create dedicated incidents page:
      * List view using timeline component
      * Create/Edit forms
      * Delete confirmation
      * Status updates
    - Enhance timeline for incidents:
      * Reuse existing card stack UI
      * Add edit functionality
      * Implement status indicators
      * Add sorting/filtering

# Follow these rules to ensure consistency, maintainability, and clarity as the project evolves.
